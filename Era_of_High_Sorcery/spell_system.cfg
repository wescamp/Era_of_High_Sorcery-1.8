#textdomain wesnoth-Era_of_High_Sorcery

{~add-ons/Era_of_High_Sorcery/spells.cfg}

#define SPELLCASTING_ICON
"attacks/staff-magic.png"#enddef
#define SPELLCASTING_ICON_SMALL
"attacks/staff-magic.png~SCALE(36,36)"#enddef


#define BASE_SPELL_STATS SPELL IMAGE REALM LEVEL COST RANGE
{VARIABLE {SPELL}_image {IMAGE}}
{VARIABLE {SPELL}_realm {REALM}}
{VARIABLE {SPELL}_level {LEVEL}}
{VARIABLE {SPELL}_base_cost {COST}}
{VARIABLE {SPELL}_base_range {RANGE}}
{VARIABLE {SPELL}_freely_castable false}
{VARIABLE {SPELL}_fixed_price false}
{VARIABLE {SPELL}_fixed_range false}
{VARIABLE {SPELL}_is_enchantment false}
#enddef

#define FREELY_CASTABLE SPELL_OR_SUMMON
{VARIABLE {SPELL_OR_SUMMON}_freely_castable true}
#enddef
#define FIXED_PRICE SPELL_OR_SUMMON
{VARIABLE {SPELL_OR_SUMMON}_fixed_price true}
#enddef

#define FIXED_RANGE SPELL
{VARIABLE {SPELL}_fixed_range true}
#enddef
#define IS_ENCHANTMENT SPELL
{VARIABLE {SPELL}_is_enchantment true}
#enddef

#define SPELL_INFO_INIT SPELL
{{SPELL}_INFO_INIT}
#enddef


#define CANT_CAST_WITH_MESSAGE MESSAGE
{VARIABLE can_cast false}
[set_variables]
  name=cant_cast_messages
  mode=append
  [value]
    message={MESSAGE}
  [/value]
[/set_variables]
#enddef

#define CANT_CAST_IF_ALREADY_ENCHANTED_WITH ENCHANTMENT_NAME MESSAGE
[if]
  [have_unit]
    x=$x1
    y=$y1
    [filter_wml]
      [variables]
        {ENCHANTMENT_NAME}=true
      [/variables]
    [/filter_wml]
  [/have_unit]
  [then]
    {CANT_CAST_WITH_MESSAGE {MESSAGE}}
  [/then]
[/if]
#enddef

#define GIVE_DUMMY_ABILITY_FOR_ENCHANTMENT FILTER ENCHANTMENT_NAME ABILITY_MALE_NAME ABILITY_FEMALE_NAME ABILITY_DESCRIPTION
[object]
  silent=yes
  [filter]
    {FILTER}
  [/filter]
  [effect]
    apply_to=new_ability
    [abilities]
      [dummy]
        id={ENCHANTMENT_NAME}_dummy_ability
        name={ABILITY_MALE_NAME}
        female_name={ABILITY_FEMALE_NAME}
        description={ABILITY_DESCRIPTION}
      [/dummy]
    [/abilities]
  [/effect]
[/object]
#enddef
#define REMOVE_DUMMY_ABILITY_FOR_ENCHANTMENT FILTER ENCHANTMENT_NAME
[object]
  silent=yes
  [filter]
    {FILTER}
  [/filter]
  [effect]
    apply_to=remove_ability
    [abilities]
      [dummy]
        id={ENCHANTMENT_NAME}_dummy_ability
      [/dummy]
    [/abilities]
  [/effect]
[/object]
#enddef

#define DASFE_AUX_CLEAN ENCHANTMENT_NAME
      {IF_VAR has_any_attacks_with_ability boolean_equals true ([then]
        [object]
          silent=yes
          [filter]
            x=$x1
            y=$y1
          [/filter]
          [effect]
            apply_to=attack
            remove_specials={ENCHANTMENT_NAME}_dummy_special
          [/effect]
        [/object]
      [/then])}
#enddef

#define DUMMY_ATTACK_SPECIALS_FOR_ENCHANTMENT ENCHANTMENT_NAME WEAPON_FILTER ABILITY_NAME ABILITY_DESCRIPTION
[event]
name=update_dummy_attack_specials
first_time_only=no
  {VARIABLE has_any_attacks_with_ability false}
  {VARIABLE has_any_attacks_without_ability false}
  {FOREACH unit.attack gdasfe_i}
    {VARIABLE this_attack_has_the_special false}
    {FOREACH unit.attack[$gdasfe_i].specials.damage gdasfe_j}
      {IF_VAR unit.attack[$gdasfe_i].specials.damage[$gdasfe_j].id equals {ENCHANTMENT_NAME}_dummy_special ([then]
        {VARIABLE this_attack_has_the_special true}
      [/then])}
    {NEXT gdasfe_j}
    {IF_VAR this_attack_has_the_special boolean_equals true ([then]
      {VARIABLE has_any_attacks_with_ability true}
    [/then]
    [else]
      {VARIABLE has_any_attacks_without_ability true}
    [/else])}
  {NEXT gdasfe_i}

  {IF_VAR unit.variables.{ENCHANTMENT_NAME} boolean_equals true ([then]
    {IF_VAR has_any_attacks_without_ability boolean_equals true ([then]
      {DASFE_AUX_CLEAN {ENCHANTMENT_NAME}}
      [object]
        silent=yes
        [filter]
          x=$x1
          y=$y1
        [/filter]
        [effect]
          apply_to=attack
          {WEAPON_FILTER}
          [set_specials]
            mode=append
            [damage]
              id={ENCHANTMENT_NAME}_dummy_special
              name={ABILITY_NAME}
              description={ABILITY_DESCRIPTION}
            [/damage]
          [/set_specials]
        [/effect]
      [/object]
    [/then])}
  [/then]
  [else]
    {DASFE_AUX_CLEAN {ENCHANTMENT_NAME}}
  [/else])}
  {CLEAR_VARIABLE has_any_attacks_with_ability}
  {CLEAR_VARIABLE has_any_attacks_without_ability}
[/event]
#enddef

#define UPDATE_DUMMY_ATTACK_SPECIALS X Y
[fire_event]
  name=update_dummy_attack_specials
  [primary_unit]
    x={X}
    y={Y}
  [/primary_unit]
[/fire_event]
#enddef

#define SETUP_SPELL_INFO SPELL
{VARIABLE {SPELL}_cost ${SPELL}_base_cost}
{IF_VAR EoHS_multiply_spell_prices greater_than 0 ([then]
  {VARIABLE_OP {SPELL}_cost multiply $EoHS_multiply_spell_prices}
[/then])}

{VARIABLE spell_cost_divisor 1}

{IF_VAR archmage_$side_number boolean_equals true ([and]
  [variable]
    name={SPELL}_fixed_price
    boolean_equals=false
  [/variable]
[/and]
[then]
  {VARIABLE_OP {SPELL}_cost       multiply 4}
  {VARIABLE_OP spell_cost_divisor multiply 5}
[/then])}

{IF_VAR EoHS_divide_spell_prices greater_than 0 ([then]
  {VARIABLE_OP spell_cost_divisor multiply $EoHS_divide_spell_prices}
[/then])}

{VARIABLE_OP {SPELL}_cost divide $spell_cost_divisor}

{VARIABLE {SPELL}_range ${SPELL}_base_range}
{IF_VAR farseer_$side_number boolean_equals true ([and]
  [variable]
    name={SPELL}_fixed_range
    boolean_equals=false
  [/variable]
[/and]
[then]
  {VARIABLE_OP {SPELL}_range multiply 3}
  {VARIABLE_OP {SPELL}_range      add 1}
  {VARIABLE_OP {SPELL}_range   divide 2}
[/then])}

{VARIABLE spell_cost ${SPELL}_cost}
{IF_VAR spell_cost greater_than 0 ([then]
  {IF_VAR EoHS_uses_mana_instead_of_gold boolean_equals true ([then]
    {VARIABLE {SPELL}_cost_string _"$spell_cost| mana"}
  [/then]
  [else]
    {VARIABLE {SPELL}_cost_string _"$spell_cost| gold"}
  [/else])}
[/then]
[else]
  {VARIABLE {SPELL}_cost_string _"No cost"}
  # Hack...
  {VARIABLE extra_cast_name extra_cast}
  {IF_VAR extra_cast_name equals {SPELL} ([then]
    {VARIABLE {SPELL}_cost_string _"15 HP"}
  [/then])}
[/else])}
{IF_VAR {SPELL}_freely_castable boolean_equals true ([then]
  {VARIABLE {SPELL}_cost_string ${SPELL}_cost_string|+_", Instant"}
[/then])}

{VARIABLE current_player_knows_{SPELL} false}
{IF_VAR ${SPELL}_realm|_skill_$side_number greater_than_equal_to ${SPELL}_level ([then]
  {VARIABLE current_player_knows_{SPELL} true}
  {VARIABLE can_cast true}
  {CLEAR_VARIABLE cant_cast_messages}

  [if]
    [variable]
      name=caster.variables.wraithform
      boolean_equals=true
    [/variable]
    [then]
      {CANT_CAST_WITH_MESSAGE _"You can't cast spells while in wraithform."}
    [/then]
  [/if]

  [if]
    [variable]
      name=caster.variables.rampage
      boolean_equals=true
    [/variable]
    [then]
      {CANT_CAST_WITH_MESSAGE _"You can't cast spells while on a rampage."}
    [/then]
  [/if]

  [if]
    [variable]
      name={SPELL}_range
      greater_than=0
    [/variable]
    [not]
      [have_location]
        x=$x1
        y=$y1
        [and]
          x=$spellcasting_conduit.x
          y=$spellcasting_conduit.y
          radius=${SPELL}_range
        [/and]
      [/have_location]
    [/not]
    [then]
      {CANT_CAST_WITH_MESSAGE _"That target is beyond your maximum range for that spell."}
    [/then]
  [/if]

  [if]
    [variable]
      name={SPELL}_range
      equals=0
    [/variable]
    [not]
      [have_unit]
        x=$x1
        y=$y1
        [and]
          x=$caster.x
          y=$caster.y
        [/and]
      [/have_unit]
    [/not]
    [then]
      {CANT_CAST_WITH_MESSAGE _"That spell can only be cast at the caster's location."}
    [/then]
  [/if]

  [if]
    {CURRENT_SIDE_HAS_GOLD_OR_MANA_OF_AT_LEAST ${SPELL}_cost}
    [or]
      [variable]
        name={SPELL}_cost
	equals=0
      [/variable]
    [/or]
    [else] # else
      {IF_VAR EoHS_uses_mana_instead_of_gold boolean_equals true ([then]
        {CANT_CAST_WITH_MESSAGE _"You don't have enough mana to cast that spell."}
      [/then]
      [else]
        {CANT_CAST_WITH_MESSAGE _"You don't have enough gold to cast that spell."}
      [/else])}
    [/else]
  [/if]

  {IF_VAR caster.attacks_left greater_than_equal_to 1 ([or]
    [variable]
      name={SPELL}_freely_castable
      boolean_equals=true
    [/variable]
  [/or]
  [or]
    [variable]
      name={SPELL}_is_enchantment
      boolean_equals=true
    [/variable]
    [and]
      [variable]
        name=enchanter_$side_number
	boolean_equals=true
      [/variable]
    [/and]
    [and]
      [variable]
        name=get_free_enchantment_now
	boolean_equals=true
      [/variable]
    [/and]
  [/or]
  [else] # else
    {CANT_CAST_WITH_MESSAGE _"You can't cast that spell because you don't have any attacks left."}
  [/else])}

  [if]
    [variable]
      name={SPELL}_is_enchantment
      boolean_equals=true
    [/variable]
    [not]
      [have_unit]
        x=$x1
        y=$y1
      [/have_unit]
    [/not]

    [then] # then
      {CANT_CAST_WITH_MESSAGE _"An enchantment spell can only be cast on a unit."}
    [/then]
  [/if]
  
  {{SPELL}_CHECK_TARGET}

  [if]
    [insert_tag]
      name=then
      variable=EoHS_auxiliary_target_limitations_{SPELL}
    [/insert_tag]
  [/if]

  {VARIABLE current_player_can_cast_{SPELL} $can_cast}

  {IF_VAR current_player_can_cast_{SPELL} boolean_equals true ([then]
    {VARIABLE {SPELL}_opt_string "&"+${SPELL}_image|+"="+{{SPELL}_NAME}+" ("+${SPELL}_cost_string|+")
"+{{SPELL}_DESCRIPTION}}
  [/then]
  [else]
    {VARIABLE {SPELL}_opt_string "&"+${SPELL}_image|+"="+"<span color='#FF0000'>"+{{SPELL}_NAME}+" ("+${SPELL}_cost_string|+")</span>
"+{{SPELL}_DESCRIPTION}}
    [set_variable]
      name=current_player_cant_cast_message_{SPELL}
      [join]
        variable=cant_cast_messages
        key=message
        separator="
"
      [/join]
    [/set_variable]
  [/else])}
[/then])}
#enddef

#define SPELL_OPTION SPELL
[option]
  message=${SPELL}_opt_string
  [show_if]
    [variable]
      name=current_player_knows_{SPELL}
      boolean_equals=true
    [/variable]
    [and]
      [variable]
        name=eohs_hide_disallowed_spells_$side_number
        boolean_equals=false
      [/variable]
      [or]
        [variable]
          name=current_player_can_cast_{SPELL}
          boolean_equals=true
        [/variable]
      [/or]
    [/and]
  [/show_if]
  [command]
    {IF_VAR current_player_can_cast_{SPELL} boolean_equals true ([else] # else
      [message]
        speaker=narrator
        side_for=$side_number
        image={SPELLCASTING_ICON}
        message=$current_player_cant_cast_message_{SPELL}
      [/message]
    [/else]

    [then] # then
      {IF_VAR {SPELL}_freely_castable boolean_equals false ([then]
        {IF_VAR {SPELL}_is_enchantment boolean_equals true ([and]
	  [variable]
            name=enchanter_$side_number
	    boolean_equals=true
	  [/variable]
	[/and]
	[and]
	  [variable]
            name=get_free_enchantment_now
	    boolean_equals=true
	  [/variable]
	[/and]
        [then]
	  {VARIABLE get_free_enchantment_now false}
	[/then]
	[else]
          {VARIABLE_OP caster.attacks_left add -1}
	[/else])}
      [/then])}
      {VARIABLE caster.resting no}
      [unstore_unit]
        variable=caster
      [/unstore_unit]

      {MODIFY_GOLD_OR_MANA_OF_CURRENT_SIDE -${SPELL}_cost}
      [scroll_to]
        x=$x1
        y=$y1
        check_fogged=true
      [/scroll_to]
      {{SPELL}_EFFECTS}
    [/then])}
  [/command]
[/option]
#enddef

#define SETUP_ALL_SPELLS_INFO
  {APPLY_FOR_ALL_SPELLS SETUP_SPELL_INFO}
#enddef
#define SETUP_ALL_ABILITIES_INFO
  {CLEAR_VARIABLE current_side_info}
  [store_side]
    side=$side_number
    variable=current_side_info
  [/store_side]

  [store_map_dimensions]
  [/store_map_dimensions]

  {SETUP_ALL_SPELLS_INFO}
  {SETUP_ALL_SUMMONS_INFO}

  [fire_event]
    name=ability_setup_extras
  [/fire_event]
#enddef

#define SPELL_AUXILIARY_EVENTS SPELL
{{SPELL}_AUXILIARY_EVENTS}
#enddef

#define _NOT_IN_ENEMY_CIRCLE SIDE
[and]
  [not]
    x=$circles_of_protection_x_list_{SIDE}
    y=$circles_of_protection_y_list_{SIDE}
  [/not]
  [or]
    x=$circles_of_protection_x_list_$side_number
    y=$circles_of_protection_y_list_$side_number
  [/or]
[/and]
#enddef
# NOTE - this macro, NOT_IN_ENEMY_CIRCLE, only works for the side whose turn it is
#define NOT_IN_ENEMY_CIRCLE
{APPLY_FOR_ALL_SIDES _NOT_IN_ENEMY_CIRCLE}
#enddef
#define _NOT_IN_ANY_CIRCLE SIDE
[not]
  x=$circles_of_protection_x_list_{SIDE}
  y=$circles_of_protection_y_list_{SIDE}
[/not]
#enddef
#define NOT_IN_ANY_CIRCLE
{APPLY_FOR_ALL_SIDES _NOT_IN_ANY_CIRCLE}
#enddef

#define IS_SPELL_CASTER
[filter_wml]
  [variables]
   EoHS_special_can_cast_spells=true
  [/variables]
[/filter_wml]
#enddef
#define IS_SPELLCASTING_PROXY
[filter_wml]
  [variables]
    EoHS_special_is_spellcasting_proxy=true
  [/variables]
[/filter_wml]
#enddef
#define MAX_SPELLCAST_DISTANCE_AROUND_CAVEWALL
100#enddef

#define USE_SPELL_SYSTEM
[event]
name=prestart
  {APPLY_FOR_ALL_SPELLS SPELL_INFO_INIT}
[/event]

{APPLY_FOR_ALL_SPELLS SPELL_AUXILIARY_EVENTS}

[event]
name=side turn
first_time_only=no
  [store_unit]
    [filter]
      {IS_WIZARD_LEADER}
    [/filter]
    variable=leaders
  [/store_unit]
  # HACK - currently only the leaders use dummy attack specials ever, so only update *them*.
  {FOREACH leaders uss_i}
    {UPDATE_DUMMY_ATTACK_SPECIALS $leaders[$uss_i].x $leaders[$uss_i].y}
  {NEXT uss_i}
[/event]

[event]
name=turn refresh
first_time_only=no
  {VARIABLE extra_summons_left 0}
  {VARIABLE get_free_enchantment_now true}
[/event]

{EOHS_MENU_ITEM eohs_cast_spell {SPELLCASTING_ICON_SMALL} _"Cast a spell" (
        [have_location]
	  x=$x1
	  y=$y1
	  {NOT_IN_ANY_CIRCLE}
	[/have_location]
	[or]
	  [variable]
	    name=current_side_info.team_name
	    equals=$circle_of_protection_controller_$x1|_$y1
	  [/variable]
	[/or]
)
(
        {NOT_IN_ENEMY_CIRCLE}

    # Do not let them cast spells to inaccessible locations, or when their leader is dead or can't cast
    # (This is a bit of a hack; it overlaps the procedural calculations inside...)
	[not]
          terrain={OBSTRUCTING_TERRAINS}
        [/not]
	[and]
          [filter]
            side=$side_number
            [and]
              {IS_SPELL_CASTER}
              [or]
                {IS_SPELLCASTING_PROXY}
              [/or]
            [/and]
          [/filter]
          radius={MAX_SPELLCAST_DISTANCE_AROUND_CAVEWALL}
          [filter_radius]
            [not]
              terrain={OBSTRUCTING_TERRAINS}
            [/not]
          [/filter_radius]
	[/and]
)
(
      {CLEAR_VARIABLE which_spellcaster_options}

      [store_unit]
        [filter]
          side=$side_number
          {IS_SPELL_CASTER}
          [and] # Hack - the 'and' tag is not necessary to the filter, but the game stalls for a while without it.
            [filter_location]
              x=$x1
              y=$y1
              radius={MAX_SPELLCAST_DISTANCE_AROUND_CAVEWALL}
              [filter_radius]
                [not]
                  terrain={OBSTRUCTING_TERRAINS}
                [/not]
              [/filter_radius]
            [/filter_location]
          [/and]
        [/filter]
        variable=possible_self_casters
      [/store_unit]
      {FOREACH possible_self_casters uss_i}
        [set_variables]
          name=which_spellcaster_options
          mode=append
          [value]
            message="&$possible_self_casters[$uss_i].image|~TC($possible_self_casters[$uss_i].side|,magenta)="+_"$possible_self_casters[$uss_i].name"
            [command]
              [set_variables]
                name=caster
                to_variable=possible_self_casters[$uss_i]
              [/set_variables]
              [set_variables]
                name=spellcasting_conduit
                to_variable=possible_self_casters[$uss_i]
              [/set_variables]
            [/command]
          [/value]
        [/set_variables]
      {NEXT uss_i}

      [store_unit]
        [filter]
          side=$side_number
          {IS_SPELLCASTING_PROXY}
          [and] # Hack - the 'and' tag is not necessary to the filter, but the game stalls for a while without it.
            [filter_location]
              x=$x1
              y=$y1
              radius={MAX_SPELLCAST_DISTANCE_AROUND_CAVEWALL}
              [filter_radius]
                [not]
                  terrain={OBSTRUCTING_TERRAINS}
                [/not]
              [/filter_radius]
            [/filter_location]
          [/and]
        [/filter]
        variable=possible_spellcasting_conduits
      [/store_unit]
      {FOREACH possible_spellcasting_conduits uss_i}
        [set_variables]
          name=spellcasting_proxy_unit
          to_variable=possible_spellcasting_conduits[$uss_i]
        [/set_variables]
        [store_unit]
          [filter]
            side=$side_number
            {IS_SPELL_CASTER}
            [insert_tag]
              name=and
              variable=spellcasting_proxy_unit.variables.EoHS_special_spellcasting_proxy_caster_filter
            [/insert_tag]
          [/filter]
          variable=possible_casters_for_conduit_$uss_i|
        [/store_unit]
        {FOREACH possible_casters_for_conduit_$uss_i| uss_j}
          [set_variables]
            name=which_spellcaster_options
            mode=append
            [value]
              message="&$possible_casters_for_conduit_$uss_i|[$uss_j].image|~TC($possible_casters_for_conduit_$uss_i|[$uss_j].side|,magenta)="+_"$possible_casters_for_conduit_$uss_i|[$uss_j].name|, via $possible_spellcasting_conduits[$uss_i].name|"
              [command]
                [set_variables]
                  name=caster
                  to_variable=possible_casters_for_conduit_$uss_i|[$uss_j]
                [/set_variables]
                [set_variables]
                  name=spellcasting_conduit
                  to_variable=possible_spellcasting_conduits[$uss_i]
                [/set_variables]
              [/command]
            [/value]
          [/set_variables]
        {NEXT uss_j}
      {NEXT uss_i}
      
      {VARIABLE casting true}
      {IF_VAR which_spellcaster_options.length greater_than 0 ([else] # else
        # Refer to the bit-of-a-hack in the filter_location for "Cast a spell".
        # This (at the time of this writing) only happens if there's a proxy with no spellcaster behind it.
        [message]
          speaker=narrator
          caption=_"Cast a spell"
          image={SPELLCASTING_ICON}
          side_for=$side_number
          message=_"You have no units that can cast spells at that area of the map."
        [/message]
        {VARIABLE casting false}
      [/else]
      [then] # then
      {IF_VAR which_spellcaster_options.length greater_than 1 ([then]
        [message]
          speaker=narrator
          caption=_"Cast a spell"
          image={SPELLCASTING_ICON}
          side_for=$side_number
          message=_"Cast from which unit?"
          [option]
            message=_"Never mind."
            [command]
              {VARIABLE casting false}
            [/command]
          [/option]
          [insert_tag]
            name=option
            variable=which_spellcaster_options
          [/insert_tag]
        [/message]
      [/then]
      # Assume that the player picks the only option available.
      [insert_tag]
        name=else
        variable=which_spellcaster_options.command
      [/insert_tag])}

      {IF_VAR casting boolean_equals true ([then]

      {SETUP_ALL_ABILITIES_INFO}

      {IF_VAR EoHS_uses_mana_instead_of_gold boolean_equals true ([then]
        {VARIABLE eohs_spell_dialog_info _"You have $eohs_mana_$side_number|| mana."}
      [/then]
      [else]
        {VARIABLE eohs_spell_dialog_info _"You have $current_side_info.gold gold."}
      [/else])}

      {VARIABLE done_with_casting_screen false}
      [while]
        [variable]
          name=done_with_casting_screen
          boolean_equals=false
        [/variable]
        [do]
          {VARIABLE done_with_casting_screen true}
          [message]
            speaker=narrator
            image={SPELLCASTING_ICON}
            caption=_"Cast a spell"
            message=$eohs_spell_dialog_info
            side_for=$side_number
            [option]
              message=_"Never mind."
            [/option]
            [option]
              message=_"Hide disallowed spells"
              [show_if]
                [not]
                  [variable]
                    name=eohs_hide_disallowed_spells_$side_number
                    boolean_equals=true
                  [/variable]
                [/not]
              [/show_if]
              [command]
                {VARIABLE eohs_hide_disallowed_spells_$side_number true}
                {VARIABLE done_with_casting_screen false}
              [/command]
            [/option]
            [option]
              message=_"Show disallowed spells"
              [show_if]
                [variable]
                  name=eohs_hide_disallowed_spells_$side_number
                  boolean_equals=true
                [/variable]
              [/show_if]
              [command]
                {VARIABLE eohs_hide_disallowed_spells_$side_number false}
                {VARIABLE done_with_casting_screen false}
              [/command]
            [/option]
            {APPLY_FOR_ALL_SPELLS SPELL_OPTION}
            {APPLY_FOR_ALL_SUMMONS SUMMON_OPTION}
          [/message]
        [/do]
      [/while]
      [/then])}
      [/then])}
)}
#enddef

#define SET_SPELL_TO_BASE_COST SPELL
{VARIABLE {SPELL}_cost ${SPELL}_base_cost}
# hack
{VARIABLE spell_realm_string $${SPELL}_realm|_skill_name|}
{VARIABLE spell_level ${SPELL}_level}
{VARIABLE {SPELL}_realm_string _"($spell_realm_string| level $spell_level|)"}
#enddef
#define SPELL_DESCRIPTION_OPTION SPELL
[option]
message="&"+${SPELL}_image|+"="+"<span color='#00FF00'>"+{{SPELL}_NAME}+" ("+${SPELL}_cost_string|+") "+${SPELL}_realm_string|+"</span>
"+{{SPELL}_DESCRIPTION}
[/option]
#enddef
#define VIEW_SPELL_DESCRIPTIONS
{APPLY_FOR_ALL_SPELLS SET_SPELL_TO_BASE_COST}
{APPLY_FOR_ALL_SPELLS SETUP_SPELL_INFO}
[message]
speaker=narrator
message=_"Descriptions of all spells, with their base costs, are listed below.
(Picking the options does nothing; this is merely an info screen)"
side_for=$side_number
  {APPLY_FOR_ALL_SPELLS SPELL_DESCRIPTION_OPTION}
[/message]
#enddef

#define SPELL_DESC_LIST_OUTPUT_HACK_AUX SPELL
{VARIABLE optstr {{SPELL}_NAME}}
{VARIABLE spdesc {{SPELL}_DESCRIPTION}}
{VARIABLE spdmsg "$spdmsg|

     $optstr| ("+${SPELL}_cost_string|+") "+${SPELL}_realm_string|+"
$spdesc|"}#enddef
#define SPELL_DESC_LIST_OUTPUT_HACK
{APPLY_FOR_ALL_SPELLS SET_SPELL_TO_BASE_COST}
{APPLY_FOR_ALL_SPELLS SETUP_SPELL_INFO}
{VARIABLE spdmsg _"Descriptions of all spells, with their base costs, are listed below."}
{APPLY_FOR_ALL_SPELLS SPELL_DESC_LIST_OUTPUT_HACK_AUX}
[music]
name=$spdmsg
[/music]
#enddef

